import argparse, json
from pathlib import Path
from datetime import datetime
import numpy as np, cv2
from tqdm import trange
from envs.mj_pick_place_env import MjPickPlaceEnv, MjPickPlaceConfig

def scripted(obs, t):
    s = obs["state"]
    eef = s[0:3]; cube = s[4:7]; tgt = s[7:9]
    if t < 30:
        dx,dy,dz = cube[0]-eef[0], cube[1]-eef[1], 0.18-eef[2]; g = 0
    elif t < 45:
        dx,dy,dz = cube[0]-eef[0], cube[1]-eef[1], (cube[2]+0.015)-eef[2]; g = 1
    elif t < 80:
        dx,dy,dz = tgt[0]-eef[0], tgt[1]-eef[1], 0.20-eef[2]; g = 1
    else:
        dx,dy,dz = tgt[0]-eef[0], tgt[1]-eef[1], 0.05-eef[2]; g = 0
    v = np.tanh(np.array([dx,dy,dz], dtype=np.float32))
    return np.concatenate([v, [g]], axis=0)

def collect(episodes, output, seed):
    cfg = MjPickPlaceConfig(seed=seed)
    env = MjPickPlaceEnv(cfg)
    root = Path(output); root.mkdir(parents=True, exist_ok=True)
    for ep in trange(episodes, desc="Collect"):
        obs = env.reset()
        frames = [obs["rgb"]]; states = [obs["state"]]; actions=[]; dones=[]
        success=False
        for t in range(cfg.max_steps):
            a = scripted(obs, t)
            obs,r,d,info = env.step(a)
            actions.append(a); frames.append(obs["rgb"]); states.append(obs["state"]); dones.append(d)
            if d:
                success=info["success"]; break
        ep_dir = root / f"episode_{ep:03d}"; ep_dir.mkdir(exist_ok=True)
        np.savez_compressed(ep_dir/"trajectory.npz",
                            obs_rgb=np.stack(frames).astype(np.uint8),
                            obs_state=np.stack(states).astype(np.float32),
                            actions=np.stack(actions).astype(np.float32),
                            dones=np.array(dones, dtype=bool),
                            success=np.array([success], dtype=bool))
        meta = {
          "episode": ep,
          "success": bool(success),
          "steps": len(actions),
          "seed": seed+ep,
          "timestamp": datetime.utcnow().isoformat()+"Z",
          "instruction": "pick and place the red cube onto the green target"
        }
        with open(ep_dir/"meta.json","w") as f: json.dump(meta,f,indent=2)
        cv2.imwrite(str(ep_dir/"preview.png"), cv2.cvtColor(frames[0], cv2.COLOR_RGB2BGR))
    env.close()

if __name__ == "__main__":
    ap = argparse.ArgumentParser()
    ap.add_argument("--episodes", type=int, default=10)
    ap.add_argument("--output", type=str, default="data/raw/mj_pick_place_v0")
    ap.add_argument("--seed", type=int, default=42)
    args = ap.parse_args()
    collect(args.episodes, args.output, args.seed)
